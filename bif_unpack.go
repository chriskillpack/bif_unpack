// Unpack BIF media index files as generated by Plex Media Server
//   Usage: bif_unpack input.bif [output_dir]
// output_dir is optional, if present image thumbnails will be extracted to output_dir
// BIF format 'reverse engineered' from https://github.com/anachirino/bifserver

package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path"
)

// BIF header magic sequence
var magicBIF = [12]byte{0x89, 0x42, 0x49, 0x46, 0x0d, 0x0a, 0x1a, 0x0a, 0, 0, 0, 0}

type bifHeader struct {
	Magic    [12]byte
	Images   int32
	Interval int32
	_        [44]byte // padding
}

type bifEntry struct {
	Index  int32
	Offset int32
}

func main() {
	log.SetFlags(0)

	// Parse cmdline args
	args := os.Args[1:]
	if len(args) < 1 {
		log.Fatal("Missing input BIF file\n")
	}
	bifFilename := args[0]
	var outDir string
	if len(args) == 2 {
		outDir = args[1]
	}

	fc, err := ioutil.ReadFile(bifFilename)
	if err != nil {
		log.Fatal(err)
	}

	br := bytes.NewReader(fc)
	header := bifHeader{}
	if err = binary.Read(br, binary.LittleEndian, &header); err != nil {
		log.Fatalf("Could not read from file: %v\n", err)
	}
	if !bytes.Equal(header.Magic[:], magicBIF[:]) {
		log.Fatal("Unexpected header")
	}
	fmt.Printf("Num images: %d\n", header.Images)
	fmt.Printf("Interval: %d\n", header.Interval)

	entries := make([]bifEntry, header.Images+1) // +1 for the additional tail entry
	if err = binary.Read(br, binary.LittleEndian, entries); err != nil {
		log.Fatalf("Could not read from file: %v\n", err)
	}
	// Check index of tail entry (0xFFFFFF, total offset)
	if entries[len(entries)-1].Index != -1 {
		log.Fatal("Unexpected final entry\n")
	}

	if outDir == "" {
		return
	}

	// Ensure output directory exists
	fi, err := os.Stat(outDir)
	if err != nil {
		if os.IsNotExist(err) {
			err = os.Mkdir(outDir, os.ModePerm)
			if err != nil {
				log.Fatalf("Error creating output directory %s: %v\n", outDir, err)
			}
		} else {
			log.Fatalf("Could not stat %s: %v\n", outDir, err)
		}
	} else {
		if !fi.IsDir() {
			log.Fatalf("Output %s is not a directory\n", outDir)
		}
	}

	for i, entry := range entries[:len(entries)-1] {
		fname := path.Join(outDir, fmt.Sprintf("%016d.jpg", entry.Index))
		f, err := os.Create(fname)
		if err != nil {
			fmt.Printf("Could not create %s: %v\n", fname, err)
			break
		}
		defer f.Close()

		sz := entries[i+1].Offset - entry.Offset
		fmt.Printf("Writing %s, %d bytes\n", fname, sz)
		n, err := f.Write(fc[entry.Offset : entry.Offset+sz])
		if err != nil {
			fmt.Printf("Failed to write file: %v\n", err)
			break
		}
		if n != int(sz) {
			fmt.Printf("Failed to write %d bytes, only wrote %d\n", sz, n)
			break
		}
	}
}
